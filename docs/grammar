// top level
type body;

type body = [ { field, "," } ], [ { ( declaration | type | func ), ";" ) } ];

field = identifier, type hint, [ "=", value literal ];

declaration = [ visibility ], mutability, identifier, "=", value literal;

type = [ visibility ], "const", identifier, "=", type definition;

type definition = "struct", "{", [ type body ], "}";

func = [ visibility ], "const", identifier, "=", func definition;

func definition = "fn", "(", [ parameter list ], ")", identifier, "{", [ func body ], "}";

identifier list = [ { identifer, "," } ], identifier;

parameter list = [ { identifier, type hint, "," } ], identifier, type hint

nestable identifier = [ { identifer, "." } ], identifier;

func body = { expresstion }, [ return statement ];

expression = expression target, "=", ( nestable identifier | call | value literal );

expression target = "_" | nestable identifier | ( mutability, identifier );

call = nestable identifier, "(", [ identifier list ], ")";

return statement = "return", [ nestable identifier | value literal ], ";"

type hint = ":", identifier;

mutability = "const" | "var";

visibility = "pub", "internal"

// values
value literal = number | string | struct | range | bool | struct init;

number = integer | float;

range = integer, "..", integer;

bool = "true" | "false";

struct init = ( identifier | "." ), "{", [ [ { field init, "," } ], field init, [ "," ] ] "}";

field init = ".", identifier, "=", value literal;

// primitives
digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";

integer = [ "-" ], { digit };

float = integer, ".", { digit };

character = lowercase char | uppercase char;

uppercase char = "A" | "B" | "C" | "D" | "E" | "F" | "G" | 
                 "H" | "I" | "J" | "K" | "L" | "M" | "N" |
                 "O" | "P" | "Q" | "R" | "S" | "T" | "U" |
                 "V" | "W" | "X" | "Y" | "Z";

lowercase char = "a" | "b" | "c" | "d" | "e" | "f" | "g" | 
                 "h" | "i" | "j" | "k" | "l" | "m" | "n" |
                 "o" | "p" | "q" | "r" | "s" | "t" | "u" |
                 "v" | "w" | "x" | "y" | "z" ;